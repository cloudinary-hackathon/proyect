// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userImages UserImage[] // Relación con las imágenes subidas por el usuario
}

model UserImage {
  id        Int      @id @default(autoincrement())
  userId    Int?
  path      String // Ruta de almacenamiento de la imagen subida
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User?             @relation(fields: [userId], references: [id])
  userImageResults UserImageResult[] // Relación con los resultados generados de la imagen
}

model UserImageResult {
  id          Int      @id @default(autoincrement())
  userImageId Int
  path        String // Ruta de almacenamiento del resultado generado
  prompt      String // Prompt utilizado para generar la imagen
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userImage   UserImage    @relation(fields: [userImageId], references: [id])
  socialPosts SocialPost[] // Relación con las publicaciones sociales
}

model SocialPost {
  id                Int      @id @default(autoincrement())
  userImageResultId Int
  socialMediaId     Int
  descriptionPromt  String // Prompt utilizado para generar la descripción
  descriptionResult String // Descripción generada para la publicación en redes sociales
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userImageResult UserImageResult @relation(fields: [userImageResultId], references: [id])
  socialMedia     SocialMedia     @relation(fields: [socialMediaId], references: [id])
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Nombre de la red social (por ejemplo, Facebook, Twitter)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socialPosts      SocialPost[] // Relación con publicaciones en esta red social
  imageSocialTypes ImageSocialType[] // Tipos de imágenes soportadas
}

model ImageSocialType {
  id            Int      @id @default(autoincrement())
  high          Int // Alto máximo de la imagen
  width         Int // Ancho máximo de la imagen
  format        String // Formato de la imagen (por ejemplo, JPG, PNG)
  socialMediaId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  socialMedia SocialMedia @relation(fields: [socialMediaId], references: [id])
}
